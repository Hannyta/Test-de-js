Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve?

Una variable es un espacio reservado en memoria con la finalidad de guardar algun dato. 

¬øCu√°l es la diferencia entre declarar e inicializar una variable?

Cuando se declara una variable solo se reserva un espacio en la memoria, en cambio cuando se inicializa se indica el tipo de variable (num, string, boolean, null).

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?

Sumar numeros es la operacion matematica de adicionar dos o mas numeros y concatenar strings se refiere a unir dos o mas variables de textos para formar una oracion.

¬øCu√°l operador me permite sumar o concatenar?

en ambos caso se realiza con el simbolo de +.

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

Nombre = strings
Apellido = strings 
Nombre de usuario en Platzi = strings
Edad = number
Correo electr√≥nico = strings
Mayor de edad = boolean
Dinero ahorrado = number
Deudas = number

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

let nombre = "Hanny";
let apellido = "Linares"; 
let nombreDeUsuarioEnPlatzi = "Hannyli";
let edad = 33;
let correoElectr√≥nico = "hannyli@gmail.com";
let mayorDeEdad = true;
let dineroAhorrado = 152000;
let deudas = 20000;

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)

let nombre = "Hanny";
let apellido = "Linares"; 
let nombreDeUsuarioEnPlatzi = "Hannyli";
let edad = 33;
let correoElectr√≥nico = "hannyli@gmail.com";
let mayorDeEdad = true;
let dineroAhorrado = 152000;
let deudas = 20000;
let dineroReal = dineroAhorrado - deudas;

console.log("Mi nombre completo es " + nombre + " " + apellido);
console.log("Tengo de dinero realmente $ " + dineroReal);

Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?
 
Una funcion es encasular una secuencia de ordenes o codigo para utilizarlas en un futuro con solo llamarlas. 

¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?

Nos permite tener el codigo m√°s organizado y poder acceder a ese resultado cuantas veces sea necesario solo con llamar a la funcion.

¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?

Los par√°metros son los nombres que se especifican en la definici√≥n de una funci√≥n para recibir valores. Los argumentos son los valores que se pasan a una funci√≥n cuando se la llama. Los argumentos se asignan a los par√°metros por orden o por nombre, seg√∫n la forma de la llamada


2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David ";
const lastname = "Castro Gallego";
const nickname = "juandc";

function completeName(name, lastname) {
    const completeName = name + lastname;

    console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
}

completeName(name, lastname)

Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un condicional?

Un condicional en JavaScript es una estructura de control de flujo que permite ejecutar un bloque de c√≥digo si se cumple una condici√≥n.

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?

En JavaScript existen dos tipos de condicionales: el if (se utiliza para tomar decisiones en funci√≥n de si se cumple una condici√≥n dada) y el switch (se utiliza para tomar decisiones en funci√≥n de distintos estados o valores de una variable).  

¬øPuedo combinar funciones y condicionales?

Si y es muy comun combinarlas.

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

const tipoDeSuscripcion = "Basic";

if (tipoDeSuscripcion === "Free") {
       console.log("Solo puedes tomar los cursos gratis")
    } else if (tipoDeSuscripcion === "Basic") {
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    } else if (tipoDeSuscripcion === "Expert") {
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    } else if (tipoDeSuscripcion === "ExpertPlus") {
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    } else {
        console.log("No logramos verificar su suscripci√≥n, por favor vuelva a intentar");
}

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè

let tiposDeSuscriptiones = {
    Free: "Solo puedes tomar los cursos gratis",
    Basic: "Puedes tomar casi todos los cursos de Platzi durante un mes",
    Expert: "Puedes tomar casi todos los cursos de Platzi durante un a√±o",
    ExpertPlus: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"
  };
  
  let suscripcion = "Expert"

 console.log(tiposDeSuscriptiones[suscripcion]);

Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?

Son una estructura de control que permite realizar una o varias instrucciones mientras una condicion sea verdadera.

¬øQu√© tipos de ciclos existen en JavaScript?

For: Tiene inicio o punto de partida, luego la cantidad de iteraciones y por ultimo un incremento. 

While: Primero establece la condicion, mientras esto se cumpla circula el ciclo.
 

Do While: Primero se ejecuta el bloque de codigo y despues evalua la condicion.


¬øQu√© es un ciclo infinito y por qu√© es un problema?

Un ciclo infinito es cuando no se incluye una instrucci√≥n para detener el bucle y generalmente la pantalla del navegador se bloquee o que la pc se guinde. 

¬øPuedo mezclar ciclos y condicionales?

Si se puede.

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

let i = 0;

while (i < 5) {
  console.log("El valor de i es: " + i);
  i++;
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

let i = 10;

while (i >=2) {
console.log("El valor de i es: " + i);
i--;
}

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

let respuesta;

while (true) {
    respuesta = prompt("¬øCu√°nto es 2 + 2?");
  
    if (respuesta === "4") {
      alert("Muchas felicidades");
      break;
    } else {
        alert("Tienes otra oportunidad")
    }
  }

Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array?

Son una serie de elemntos o formaci√≥n tipo vector o matriz que permite almacenar una serie de datos localizados por indices y separados por comas.

¬øQu√© es un objeto?

Es una estructura de datos que permite almacenar valores mediante propiedad-valor atraves de la sintaxis de llaves {} y separados por comas.

¬øCu√°ndo es mejor usar objetos o arrays?

Es mejor trabajar con objetos cuando son multiples propiedades y comportamientos, te permitiran organizar la informacion de manera estructurada.

Array para almacenar elementos del mismo tipo, son especialmente utiles para manejar colecciones de elementos del mismo tipo de datos, como una lista de tareas, un conjunto de imagenes.

¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?

Objetos y arrays se pueden combinar. Puedes tener un array que contenga objetos, lo que te permite organizar y acceder a datos de manera m√°s flexible

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

let estudiantes = ["Samantha", "Camilo", "Jesus", "Leonel", "Alejandra", "Antonella"];

function saludarEstudiantes(estudiante) {
    console.log(`Hola ${estudiante}!`);
}

saludarEstudiantes(estudiantes[0]);

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

let carrito = ["Fresas", "Manzana", "Agua", "Chocolate", "Tomate", "Carne", "Pollo", "lechuga", "Mayonesa"];

function carritoDeCompra() {
        console.log(`Tienes en tu carrito ${carrito.join(", ")}`);
}

carritoDeCompra();

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

let estudiantes = ["Samantha", "Camilo", "Jesus", "Leonel", "Alejandra", "Antonella"];

function saludarEstudiantes(estudiante) {
    for(let i = 0; i < estudiantes.length; i++) {
        console.log(`Hola ${estudiantes[i]}!`);
    }
}

saludarEstudiantes();
